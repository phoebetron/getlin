package metric

import (
	"fmt"
	"reflect"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/phoebetron/getlin"
)

func Test_Metric_States(t *testing.T) {
	testCases := []struct {
		rat []float32
		sta [41]float32
	}{
		// Case 0
		{
			rat: []float32{},
			sta: [41]float32{
				0, // -1.00
				0, // -0.95
				0, // -0.90
				0, // -0.85
				0, // -0.80
				0, // -0.75
				0, // -0.70
				0, // -0.65
				0, // -0.60
				0, // -0.55
				0, // -0.50
				0, // -0.45
				0, // -0.40
				0, // -0.35
				0, // -0.30
				0, // -0.25
				0, // -0.20
				0, // -0.15
				0, // -0.10
				0, // -0.05
				0, //  0.00
				0, // +0.05
				0, // +0.10
				0, // +0.15
				0, // +0.20
				0, // +0.25
				0, // +0.30
				0, // +0.35
				0, // +0.40
				0, // +0.45
				0, // +0.50
				0, // +0.55
				0, // +0.60
				0, // +0.65
				0, // +0.70
				0, // +0.75
				0, // +0.80
				0, // +0.85
				0, // +0.90
				0, // +0.95
				0, // +1.00
			},
		},
		// Case 1
		{
			rat: []float32{
				-0.35,
				-0.35,
				-0.35,
				+0.95,
			},
			sta: [41]float32{
				0,    // -1.00
				0,    // -0.95
				0,    // -0.90
				0,    // -0.85
				0,    // -0.80
				0,    // -0.75
				0,    // -0.70
				0,    // -0.65
				0,    // -0.60
				0,    // -0.55
				0,    // -0.50
				0,    // -0.45
				0,    // -0.40
				0.75, // -0.35
				0,    // -0.30
				0,    // -0.25
				0,    // -0.20
				0,    // -0.15
				0,    // -0.10
				0,    // -0.05
				0,    //  0.00
				0,    // +0.05
				0,    // +0.10
				0,    // +0.15
				0,    // +0.20
				0,    // +0.25
				0,    // +0.30
				0,    // +0.35
				0,    // +0.40
				0,    // +0.45
				0,    // +0.50
				0,    // +0.55
				0,    // +0.60
				0,    // +0.65
				0,    // +0.70
				0,    // +0.75
				0,    // +0.80
				0,    // +0.85
				0,    // +0.90
				0.25, // +0.95
				0,    // +1.00
			},
		},
		// Case 2
		{
			rat: []float32{
				-0.35,
				-0.35,
				-0.35,
				-0.35,
				-0.35,
				0,
				0,
				+0.05,
				+0.05,
				+0.05,
				+0.95,
			},
			sta: [41]float32{
				0,          // -1.00
				0,          // -0.95
				0,          // -0.90
				0,          // -0.85
				0,          // -0.80
				0,          // -0.75
				0,          // -0.70
				0,          // -0.65
				0,          // -0.60
				0,          // -0.55
				0,          // -0.50
				0,          // -0.45
				0,          // -0.40
				0.45454547, // -0.35
				0,          // -0.30
				0,          // -0.25
				0,          // -0.20
				0,          // -0.15
				0,          // -0.10
				0,          // -0.05
				0.18181819, //  0.00
				0.27272728, // +0.05
				0,          // +0.10
				0,          // +0.15
				0,          // +0.20
				0,          // +0.25
				0,          // +0.30
				0,          // +0.35
				0,          // +0.40
				0,          // +0.45
				0,          // +0.50
				0,          // +0.55
				0,          // +0.60
				0,          // +0.65
				0,          // +0.70
				0,          // +0.75
				0,          // +0.80
				0,          // +0.85
				0,          // +0.90
				0.09090909, // +0.95
				0,          // +1.00
			},
		},
	}

	for i, tc := range testCases {
		t.Run(fmt.Sprintf("%03d", i), func(t *testing.T) {
			var met getlin.Metric
			{
				met = New(Config{})
			}

			for _, x := range tc.rat {
				met.Set().Sta(met.Get().Sta().Ind(x), 1)
			}

			var sta [41]float32
			{
				sta = met.Get().Sta().Nrm()
			}

			if !reflect.DeepEqual(sta, tc.sta) {
				t.Fatalf("sta\n\n%s\n", cmp.Diff(tc.sta, sta))
			}
		})
	}
}
